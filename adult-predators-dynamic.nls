
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; mortality

; mortality:
; adult-predators die randomly when they are in crops, both foraging or on an infected patch
; no mortality in SNH patches
; no mortality for juveniles
; mortality occurs between start-season and end-season (0 - 180)

to adult-predators-mortality-pattern
  
  if mortality-pattern = "constant"
  [
    ask adult-predators with [ [land-cover] of patch-here = 1 ]
    [
      let death? precision (random-float 1) 2
      if (death? < adult-predators-mortality)
      [
        if (count adult-predators-here = 1 and count juvenile-predators-here = 0) [ask patch-here [set predator-presence FALSE]]
        set total-nb-of-adult-predators-deaths (total-nb-of-adult-predators-deaths + 1)
        die 
      ]
    ]
  ]
  
  if mortality-pattern = "density-dependence"
  [
    let number-of-adult-predators (count adult-predators) ; adult-predators in both SNH / crops or only in crops?
    set adult-predators-mortality (1 - (1 / number-of-adult-predators))
    
    ask adult-predators with [ [land-cover] of patch-here = 1 ]
    [
      let death? precision (random-float 1) 2
      if (death? < adult-predators-mortality)
      [
        if (count adult-predators-here = 1 and count juvenile-predators-here = 0) [ask patch-here [set predator-presence FALSE]]
        set total-nb-of-adult-predators-deaths (total-nb-of-adult-predators-deaths + 1)
        die 
      ]
    ]
  ]
 
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; forage

; forage:
; if the adult-predators can still fly (flight-capacity > 0) and currently stays on a patch like:
; patch SNH
; patch crop with state = 0,1,4
; patch crop with state = 2 but not the first arrived
; patch crop with state = 3 but not the first arrived
; move
; otherwise stay here (nothing happens) or die (if flight-capacity = 0)

to adult-predators-forage
  
  ask adult-predators 
  [
    if date >= date-for-first-foraging-movement
    [
      ; already on an attractive crop patch?
      if I-cannot-stay-here
      ; move
      [foraging-pattern]
    ]
  ]
  
end

;;; conditions (adult-predators unable to stay here)

to-report I-cannot-stay-here 
  report SNH-patch OR crop-patch-state-0-1-4 OR crop-patch-state2-but-not-first OR crop-patch-state3-but-not-first OR crop-patch-state3-and-first-but-time-for-eggs
end

; SNH patch
to-report SNH-patch
  report [land-cover] of patch-here = 0
end

; crop patches with state = 0, 1 or 4
to-report crop-patch-state-0-1-4
  report [land-cover] of patch-here = 1 and ([state] of patch-here = 0 or [state] of patch-here = 1 or [state] of patch-here = 4)
end

; crop patch state 2 but not first
to-report crop-patch-state2-but-not-first
  report [state] of patch-here = 2 and [land-cover] of patch-here = 1 and [first-adult-predator-arrived] of patch-here != [who] of self
end

; crop patch state 3 but not first
to-report crop-patch-state3-but-not-first
  report [state] of patch-here = 3 and [land-cover] of patch-here = 1 and [first-adult-predator-arrived] of patch-here != [who] of self
end

; crop patch state 3 but time for eggs
to-report crop-patch-state3-and-first-but-time-for-eggs
  report ([state] of patch-here = 3) and ([land-cover] of patch-here = 1) and ([first-adult-predator-arrived] of patch-here = [who] of self) and ([adult-occupation] of patch-here = [duration-before-eggs] of patch-here)
end

;;; foraging-pattern

; on veut rendre les predators + intelligents
; ils détectent mieux les crops infectés
; ils ont un radius de distance variable, et lorsqu'il y a un crop infecté attractif dans ce radius, ils font un saut dans cette direction

to foraging-pattern
  
  ; y a-t-il un patch attractif dans les 8 + proches voisins, si oui on va dessus, sinon on regarde + loin
  ; ifelse any? patches in-radius 1.5 with [state = 2 and land-cover = 1]
  ; oui -> on va dessus
  ; [
    ; choose arrival-patch
    ; let more-infected-crop-patch-in-radius max-one-of patches in-radius 1.5 with [land-cover = 1 and state = 2] [time-since-infection] 
    
    ; update departure-patch
    ; if (count adult-predators-here = 1 and count juvenile-predators-here = 0) [ask patch-here [set predator-presence FALSE]] ; if adult-predators was the only one on this patch
    
    ; adult-predator agent moves to arrival-patch
    ; face more-infected-crop-patch-in-radius 
    ; move-to more-infected-crop-patch-in-radius
    
    ; update arrival-patch
    ; ask patch-here [set predator-presence TRUE set visit-counter visit-counter + 1]
  ; ]
  ; non -> on élargit le radius
  ; [
    ; y a-t-il un patch attractif dans les 24 + proches voisins, si oui on va sur le patch le + proche dans radius 1.5, sinon mvt aléatoire in-radius 1.5
    ifelse any? patches in-radius detection-radius with [state = 2 and land-cover = 1] 
    ; oui -> on va sur le patch in-radius 1.5 le + proche du patch attractif in-radius 2.9
    [
      ; choose directional-patch
      let more-infected-crop-patch-in-radius max-one-of patches in-radius detection-radius with [land-cover = 1 and state = 2] [time-since-infection]
     
      ; choose arrival-patch
      let arrival-patch min-one-of patches in-radius 1.5 [distance more-infected-crop-patch-in-radius]
      
      ; update departure-patch
      if (count adult-predators-here = 1 and count juvenile-predators-here = 0) [ask patch-here [set predator-presence FALSE]] ; if adult-predators was the only one on this patch
    
      ; adult-predator agent moves to arrival-patch
      face arrival-patch
      move-to arrival-patch
    
      ; update arrival-patch
      ask patch-here [set predator-presence TRUE set visit-counter visit-counter + 1]
      
    ]
    ; non -> mvt aléatoire in-radius 1.5
    [
      ; choose arrival-patch
      let p one-of patches in-radius 1.5
    
      ; update departure-patch
      if (count adult-predators-here = 1 and count juvenile-predators-here = 0) [ask patch-here [set predator-presence FALSE]] ; if adult-predators was the only one on this patch
    
      ; adult-predator agent moves to arrival-patch
      face p 
      move-to p 
    
      ; update arrival-patch
      ask patch-here [set predator-presence TRUE]
    ]
  ;]
  
  set total-nb-of-foraging-movements total-nb-of-foraging-movements + 1
  
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; flee = come-back to SNH between date-to-flee and end-season


to adult-predators-flee
  
  ask adult-predators 
  [
    if [land-cover] of patch-here != 0
    [
      
      ; choose directional-patch
      let closest-SNH-patch patch [x-closest-SNH] of patch-here [y-closest-SNH] of patch-here
      
      ; choose arrival-patch
      let arrival-patch min-one-of patches in-radius 1.5 [distance closest-SNH-patch]
      
      
      ; update departure-patch
      if (count adult-predators-here = 1 and count juvenile-predators-here = 0) [ask patch-here [set predator-presence FALSE]] ; if adult-predators was the only one on this patch
    
      ; adult-predator agent moves to arrival-patch
      face arrival-patch
      move-to arrival-patch

      
      ; update arrival-patch
      ask patch-here [set predator-presence TRUE set visit-counter visit-counter + 1]
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; overwintering at end-season -> new year

;;; overwintering
; all juveniles die because they are in crop patches
; carrying-capacity of SNH cluster: 1/1, included into the flee method
; adults in SNH clusters survive to the overwintering with a proba

to adult-predators-overwintering
  
  ; on interroge les patchs avec + d'1 pred dessus
  ask patches with [(land-cover = 0) and (count adult-predators-here > 1)]
  [
    ; on conserve le nb - 1 de préds abrités
    let var1 count adult-predators-here - 1
    ; kill tous les préds. sur ce patch sauf 1
    ask n-of var1 adult-predators-here [die]
    
    ; on demande aux patchs avec le same plabel et sans préds d'en prendre 1
    let counter-free-SNH-patches count patches with [(plabel = [plabel] of myself) and (count adult-predators-here = 0)]
    ifelse var1 > counter-free-SNH-patches 
    [ask patches with [(plabel = [plabel] of myself) and (count adult-predators-here = 0)][birth-adult-predators set predator-presence true]]
    [ask n-of var1 patches with [(plabel = [plabel] of myself) and (count adult-predators-here = 0)][birth-adult-predators set predator-presence true]]
    
  ]

  ask patches with [(land-cover = 0) and (count adult-predators-here > 0)]
  [
    ; si on veut augmenter l'effet overwintering = par ex. il faudrait 2 patchs SNH pour faire survivre un prédateur
    if (overwintering-effect > 1)
    [
      let nb-of-SNH-patches-in-my-cluster (count patches with [plabel = [plabel] of myself])
      let nb-of-SNH-patches-in-my-cluster-with-a-pred ( count patches with [ (plabel = [plabel] of myself) and (count adult-predators-here > 0) ] )
      
      ; bizarre, pour fixer un bug
      if nb-of-SNH-patches-in-my-cluster-with-a-pred != 0
      [
        if ( ( nb-of-SNH-patches-in-my-cluster / nb-of-SNH-patches-in-my-cluster-with-a-pred ) < overwintering-effect )
        [
          let nb-of-adults-which-could-overwinter floor (nb-of-SNH-patches-in-my-cluster / overwintering-effect)
          let nb-of-adults-to-kill (nb-of-SNH-patches-in-my-cluster-with-a-pred - nb-of-adults-which-could-overwinter)
        
          ask n-of nb-of-adults-to-kill patches with [ (plabel = [plabel] of myself) and (count adult-predators-here > 0) ]
          [
            set total-nb-of-adult-predators-deaths (total-nb-of-adult-predators-deaths + 1)
            set predator-presence FALSE
            ask adult-predators-here [die]
          ] 
        ]
      ]
    ]
  ]
  
end






