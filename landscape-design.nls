globals 
[
  average-green-green-neighbors
  nb-permutations-to-target-agregation
]

; initiate a landscape grid according to the parameters of composition (number-of-SNH-patches) and configuration (target-for-agregation)
; change value of land-cover to do it
; when the design is stable, identify SNH clusters and compute the proximity of every patch of the grid to the closer cluster

to landscape-design
  
  ; presence of SNH patches ?
  ifelse proportion-of-SNH-patches > 0
  [
  
    ; random land-cover landscape, according to 'number-of-SNH-patches'
    ask patches [set land-cover 1]
    ask n-of number-of-SNH-patches patches [set land-cover 0]
  
    ; land-cover permutations to find a configuration close to 'target-of-agregation'
  
    set average-green-green-neighbors mean [count neighbors with [land-cover = 0 ]] of patches with [land-cover = 0] ; while-loop fits 'average-green-green-neighbors' with 'target-of-agregation'
  
    set nb-permutations-to-target-agregation 0
  
    while [(abs(average-green-green-neighbors - target-for-agregation) > accuracy-threshold) = TRUE AND (nb-permutations-to-target-agregation < nb-max-permutations-to-target-agregation) = TRUE]
    [
      ; show average-green-green-neighbors
    
      set nb-permutations-to-target-agregation nb-permutations-to-target-agregation + 1
    
      show nb-permutations-to-target-agregation
    
      set average-green-green-neighbors mean [count neighbors with [land-cover = 0]] of patches with [land-cover = 0]
    
      if-else average-green-green-neighbors < target-for-agregation
      [
        ask one-of patches with [land-cover = 0]
        [ 
          let N count neighbors with [land-cover = 0]
          let more-green-neighbors-than-me patches with [land-cover = 0 and self != myself and (member? self [neighbors] of myself = false )] with [count neighbors with [land-cover = 0] >= N and count neighbors with [land-cover = 0] < count neighbors]
          ;show more-green-neighbors-than-me
          if count more-green-neighbors-than-me > 0 
          [
            ask one-of more-green-neighbors-than-me 
            [
              ask one-of neighbors with [land-cover = 1] [set land-cover 0]
              ask myself [set land-cover 1]
            ]
          ]
        ]
      ]
      ; ifelse 2nd brackets
      [ 
        ask one-of patches with [land-cover = 0]
        [ 
          let N count neighbors with [ land-cover = 0 ]
          let less-green-neighbors-than-me patches with [land-cover = 1 and (member? self [neighbors] of myself = false )] with [count neighbors with [land-cover = 0] < N and count neighbors with [land-cover = 0] < count neighbors]
          if count less-green-neighbors-than-me > 0 
          [
            ask one-of less-green-neighbors-than-me 
            [
              ask one-of neighbors with [land-cover = 1] [set land-cover 0]
              ask myself [set land-cover 1]
            ]
          ]
        ]
      ] ; end ifelse
      
      color-patches ; color crop patches in yellow and SNH in green
    
    ] ; end while
      
    ; identify SNH clusters and label them
    find-clusters
  
    ; for every crop patch, compute the distance (minimal nb of jumps) to the closest SNH patch
    computation-of-proximity-with-SNH
    
  ]
  ; if proportion-of-SNH-patches = 0 => control
  [
    ask patches [set land-cover 1]
    color-patches
  ]
  
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; color patches according to land-cover

to color-patches
  ask patches
  [
    if land-cover = 0 [set pcolor green] ; SNH
    if land-cover = 1 [set pcolor yellow] ; Crop
  ]
end

;;; identify clusters and label them

to find-clusters
  ask patches[set cluster nobody] ; initially, patches have no clusters
  
  loop [
    
    ; pick a random patch that isn't in a cluster yet
    let seed one-of patches with [cluster = nobody]
    
    ; if we can't find one, then we're done!
    if seed = nobody
    [ 
      show-clusters
      stop 
    ]
    
    ; otherwise, make the patch the "leader" of a new cluster, by assigning itself to its own cluster
    ; then call grow-cluster to find the rest of the cluster
    ask seed
    [ 
      set cluster self
      grow-cluster 
    ]
    
  ]
  
  display
end

to grow-cluster 
  ask neighbors4 with [(cluster = nobody) and (pcolor = [pcolor] of myself)]
  [ 
    set cluster [cluster] of myself
    grow-cluster 
  ]
end

to show-clusters ; once all the clusters have been found put numeric labels on them, so the user can see that the clusters were identified correctly
  let counter 0
  loop
  [ 
    ;; pick a random patch we haven't labeled yet
    let p one-of patches with [plabel = ""]
    if p = nobody [ stop ]
    
    ;; give the same label to all patches in the chosen patch's cluster 
    ask p [ask patches with [cluster = [cluster] of myself] [set plabel counter]]
    set counter counter + 1 
  ]
end


to computation-of-proximity-with-SNH

  ; SNH patches give themselves their own coordinates and distances
  ask patches with [land-cover = 0]
  [
    set closest-SNH-distance 0
    set x-closest-SNH [pxcor] of self
    set y-closest-SNH [pycor] of self
  ]

  ; SNH patches give to their crop neighbors : 1) closer-SNH-distance = 1, and 2) their own coordinates (= coordinates of the closer SNH)
  ask patches with [land-cover = 0]
  [
    let x-closest-SNH-start pxcor
    let y-closest-SNH-start pycor
    ask neighbors4
    [
      if land-cover = 1
      [
        set closest-SNH-distance 1
        set x-closest-SNH x-closest-SNH-start
        set y-closest-SNH y-closest-SNH-start
      ]
    ]
  ]

  ; updated crop patches ask their not updated crop neighbors and give them : 
  ; 1) closer-SNH-distance of self + 1, 
  ; and 2) their own coordinates (= coordinates of the closer SNH)
  while [any? patches with [closest-SNH-distance = 0 and land-cover = 1]]
  [
    ask patches with [closest-SNH-distance != 0]
    [
      ask neighbors4
      [
        if land-cover = 1 and  closest-SNH-distance = 0
        [
          set closest-SNH-distance [closest-SNH-distance + 1] of myself
          set x-closest-SNH [x-closest-SNH] of myself
          set y-closest-SNH [y-closest-SNH] of myself
        ]
      ]
    ]
  ]
end


